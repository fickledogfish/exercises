/*
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

pub fn gen_fib_seq(cap: u64) -> Vec<u64> {
    let mut fibs: Vec<u64> = vec![1, 2];
    let mut curr_el = 2;

    loop {
        let last_el = fibs[curr_el-1] + fibs[curr_el-2];

        if last_el > cap {
            break;
        }

        fibs.push(last_el);
        curr_el += 1;
    }

    fibs
}

pub fn gen_even_fib_seq(cap: u64) -> Vec<u64> {
    gen_fib_seq(cap).iter()
        .filter(|&el| el % 2 == 0)
        .map(|&el| el)
        .collect()
}

fn main() {
    let cap = 4_000_000;
    let seq = gen_even_fib_seq(cap);
    println!("{}", seq.iter().sum::<u64>());
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn simple_fib_seq() {
        let fibs_under_10: Vec<u64> = vec![1, 2, 3, 5, 8];
        assert_eq!(fibs_under_10, gen_fib_seq(10));
    }

    #[test]
    fn simple_even_fib_seq() {
        let even_fibs_under_10: Vec<u64> = vec![2, 8];
        assert_eq!(even_fibs_under_10, gen_even_fib_seq(10));
    }
}
